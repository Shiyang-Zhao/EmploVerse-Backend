package com.java.springboot.EMSbackend.model.employeeModel;

import com.java.springboot.EMSbackend.model.userModel.User;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;
import jakarta.validation.constraints.NotNull;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Entity
@Getter
@Setter
@NoArgsConstructor
@Table(name = "employees", uniqueConstraints = { @UniqueConstraint(columnNames = "user_id") })
public class Employee {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "id", updatable = false)
	private long id;

	@NotNull
	@OneToOne(fetch = FetchType.EAGER, optional = false)
	@JoinColumn(name = "user_id", referencedColumnName = "id")
	private User user;

	@NotNull
	@OneToOne(cascade = CascadeType.ALL, optional = false)
	@JoinColumn(name = "personalInfo_id", referencedColumnName = "id")
	private PersonalInfo personalInfo;

	@NotNull
	@OneToOne(cascade = CascadeType.ALL, optional = false)
	@JoinColumn(name = "employeeInfo_id", referencedColumnName = "id")
	private EmployeeInfo employeeInfo;

	@NotNull
	@OneToOne(cascade = CascadeType.ALL, optional = false)
	@JoinColumn(name = "educationInfo_id", referencedColumnName = "id")
	private EducationInfo educationInfo;

	@NotNull
	@OneToOne(cascade = CascadeType.ALL, optional = false)
	@JoinColumn(name = "salaryInfo_id", referencedColumnName = "id")
	private SalaryInfo salaryInfo;

	// Constructor without ID (for creating new employees, ID will be generated by
	// the database)
	public Employee(User user) {
		this.user = user;
		this.personalInfo = new PersonalInfo();
		this.employeeInfo = new EmployeeInfo();
		this.educationInfo = new EducationInfo();
		this.salaryInfo = new SalaryInfo();
	}

	public Employee(User user, PersonalInfo personalInfo, EmployeeInfo employeeInfo, EducationInfo educationInfo,
			SalaryInfo salaryInfo) {
		this.user = user;
		this.personalInfo = personalInfo;
		this.employeeInfo = employeeInfo;
		this.educationInfo = educationInfo;
		this.salaryInfo = salaryInfo;
	}
}